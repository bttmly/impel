// Generated by CoffeeScript 1.8.0
var check, checkObj, checkPrimitive, err, impel, isPrimitive,
  __slice = [].slice;

err = function(val, type) {
  throw new TypeError("Invalid argument: " + value + " should be a " + ctor);
};

isPrimitive = function(value) {
  var to;
  to = typeof value;
  return to === "string" || to === "number" || to === "boolean";
};

checkPrimitive = function(value, ctor) {
  var to;
  to = typeof value;
  if (!(to === "string" && ctor === String || to === "number" && ctor === Number || to === "boolean" && ctor === Boolean)) {
    return err(value, ctor);
  }
};

checkObj = function(value, ctor) {
  if (!(value instanceof ctor)) {
    return err(value, ctor);
  }
};

check = function(arg, type) {
  if (isPrimitive(arg)) {
    return checkPrimitive(arg, type);
  } else {
    return checkObj(arg, type);
  }
};

impel = function(fn, types) {
  return function() {
    var arg, i, _i, _len;
    for (i = _i = 0, _len = arguments.length; _i < _len; i = ++_i) {
      arg = arguments[i];
      check(arg, types[i]);
    }
    return fn.apply(this, arguments);
  };
};

impel.fnFirst = function() {
  var args, fn;
  fn = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
  return impel(fn, args);
};

impel.fnLast = function() {
  var args, fn, _i;
  args = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), fn = arguments[_i++];
  return impel(fn, args);
};

impel.ctor = function(ctor, types) {
  return function() {
    var arg, i, inst, _i, _len;
    for (i = _i = 0, _len = arguments.length; _i < _len; i = ++_i) {
      arg = arguments[i];
      check(arg, types[i]);
    }
    inst = Object.create(ctor.prototype);
    ctor.apply(inst, arguments);
    return inst;
  };
};

module.exports = impel;
